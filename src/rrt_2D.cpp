#include <rrt/rrt_2D.h>

#include <random>

RRT2D::RRT2D(ros::NodeHandle* nodehandle) : RRT<Configuration2D>(nodehandle, 2) {}

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

Configuration2D RRT2D::fromPoseToRobotConfiguration_(const geometry_msgs::Pose &pose) {
  return Configuration2D{.position = WorldPosition{.x = pose.position.x, .y = pose.position.y}};
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

Configuration2D RRT2D::randomRobotConfiguration_() {
  static std::random_device rd;
  static std::mt19937 mt(rd());
  static std::uniform_real_distribution<double> x_coordinate(map_.info.origin.position.x, map_.info.origin.position.x + map_.info.resolution * map_.info.width);
  static std::uniform_real_distribution<double> y_coordinate(map_.info.origin.position.y, map_.info.origin.position.y + map_.info.resolution * map_.info.height);
  return Configuration2D{.position = WorldPosition{.x = x_coordinate(mt), .y = y_coordinate(mt)}};
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

std::pair<std::vector<Configuration2D>, double> RRT2D::computeMinCostPath_(const Configuration2D &parent,
                                                                           const Configuration2D &child) {
  // straight line is the minimum cost path
  double dist = sqrt(computeSquaredDistance_(parent, child));
  return std::make_pair(std::vector<Configuration2D>{parent, child}, dist);
}
